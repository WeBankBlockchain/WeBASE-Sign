version '1.0'

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

// In this section you declare where to find the dependencies of your project
repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    maven { url 'https://dl.bintray.com/ethereum/maven/'}
    mavenLocal()
    mavenCentral()
}

def spring_boot_version="1.5.22.RELEASE"
List springboot =[ 
	"org.springframework.boot:spring-boot-starter-web:$spring_boot_version",
	"org.springframework.boot:spring-boot-autoconfigure:$spring_boot_version",
	"org.springframework.boot:spring-boot-configuration-processor:$spring_boot_version",
	"org.springframework.boot:spring-boot-starter-aop:$spring_boot_version",
    // "org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version",
    "org.springframework.boot:spring-boot-starter-cache:$spring_boot_version"
]
// cover old version
def spring_version="4.3.27.RELEASE"
List spring =[
    "org.springframework:spring-jdbc:$spring_version",
    "org.springframework:spring-web:$spring_version",
    "org.springframework:spring-webmvc:$spring_version",
    "org.springframework:spring-context-support:$spring_version"
]

List swagger = [
    'io.springfox:springfox-swagger2:2.8.0',
    'io.springfox:springfox-swagger-ui:2.8.0'
]

List mysql = [
    'mysql:mysql-connector-java:8.0.22',
    'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1'
]

def log4j_version="2.13.3"
List log4j = [
    "org.apache.logging.log4j:log4j-api:$log4j_version",
    "org.apache.logging.log4j:log4j-core:$log4j_version",
    "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version",
    "org.apache.logging.log4j:log4j-web:$log4j_version"
]

List jaxb = [
     "javax.xml.bind:jaxb-api:2.3.0",
     "com.sun.xml.bind:jaxb-impl:2.3.0",
     "com.sun.xml.bind:jaxb-core:2.3.0",
     "javax.activation:activation:1.1.1"
]

def jackson_version = "2.11.0"
List jackson = [
    "com.fasterxml.jackson.core:jackson-databind:$jackson_version",
    "com.fasterxml.jackson.core:jackson-annotations:$jackson_version",
    "com.fasterxml.jackson.core:jackson-core:$jackson_version",
    "com.fasterxml.jackson.module:jackson-module-parameter-names:$jackson_version",
    "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version",
    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version",
]

// cover old version
def tomcat_version = "8.5.56"
List tomcat = [
    "org.apache.tomcat.embed:tomcat-embed-core:$tomcat_version",
    "org.apache.tomcat.embed:tomcat-embed-el:$tomcat_version",
    "org.apache.tomcat.embed:tomcat-embed-websocket:$tomcat_version",
    "org.apache.tomcat:tomcat-jdbc:$tomcat_version",
    "org.apache.tomcat:tomcat-juli:$tomcat_version"
]

dependencies {
    compile springboot,spring,swagger,mysql,log4j,jaxb,jackson,tomcat
    compile 'org.fisco-bcos.java-sdk:sdk-crypto:2.7.0-SNAPSHOT'
    compile 'org.slf4j:jcl-over-slf4j:1.7.30'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'org.projectlombok:lombok:1.18.2'
    compile "org.bouncycastle:bcprov-jdk15on:1.67"
    annotationProcessor 'org.projectlombok:lombok:1.18.2'
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'com.mchange', module: '*'
}

sourceSets {
	main {
		java {
	        srcDir 'src/main/java'
		}
        resources  {
            srcDir 'src/main/resources'
        }
	}
}

clean {
    delete 'dist'
    delete 'build'
    delete 'log'
}

jar {
	destinationDir file('dist/apps')
	archiveName project.name + '.jar'
	exclude '**/*.xml'
	exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf_template'
        }
		copy {
			from configurations.runtime
			into 'dist/lib'
		}
		copy {
			from file('.').listFiles().findAll{File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env'))}
			into 'dist'
		}
		copy {
		    from file('release_note.txt')
		    into 'dist'
		}
	}
}
